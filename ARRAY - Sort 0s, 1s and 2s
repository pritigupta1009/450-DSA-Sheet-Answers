Given an array arr[] containing only 0s, 1s, and 2s. Sort the array in ascending order.

You need to solve this problem without utilizing the built-in sort function.

Examples:

Input: arr[] = [0, 1, 2, 0, 1, 2]
Output: [0, 0, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.
Input: arr[] = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]
Output: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.

Follow up: Could you come up with a one-pass algorithm using only constant extra space?
Constraints:
1 <= arr.size() <= 106
0 <= arr[i] <= 2

-------------------------------------------------------------------------------------------------------------------

//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine());

        while (t-- > 0) {
            String input = br.readLine();
            String[] inputArray = input.split("\\s+");
            int a[] = new int[inputArray.length];

            for (int i = 0; i < a.length; i++) a[i] = Integer.parseInt(inputArray[i]);

            Solution ob = new Solution();
            ob.sort012(a);

            for (int num : a) {
                System.out.print(num + " ");
            }
            System.out.println();
            System.out.println("~");
        }
    }
}


// } Driver Code Ends

class Solution {
    // Function to sort an array of 0s, 1s, and 2s
    public void sort012(int[] arr) {
        // code here
        
        /* method 1
        Arrays.sort(arr);*/
        
        //method 2 : last case time limit was exceeded
        /*int minpos=Integer.MIN_VALUE;
        for(int i=0; i<arr.length; i++)
        {
            minpos=i;
            for(int j=i+1; j<arr.length; j++)
            {
                if(arr[j]<arr[minpos])
                    minpos=j;
            }
            //swap
            int temp=arr[i];
            arr[i]=arr[minpos];
            arr[minpos]=temp;
        }*/
        
        
        //method 3 : deviding the array into 3 array in a single pass
        ArrayList<Integer> a=new ArrayList<Integer>();
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i]==0)
                a.add(arr[i]);
        }
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i]==1)
                a.add(arr[i]);
        }
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i]==2)
                a.add(arr[i]);
        }
        int index = 0;
        for(int i : a)
        {
            arr[index++]=i;
        }
    }
}



//{ Driver Code Starts.
// } Driver Code Ends
