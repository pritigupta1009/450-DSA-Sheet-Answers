You are given two strings of equal lengths, s1 and s2. The task is to check if s2 is a rotated version of the string s1.

Note: The characters in the strings are in lowercase.

Examples :

Input: s1 = "abcd", s2 = "cdab"
Output: true
Explanation: After 2 right rotations, s1 will become equal to s2.
Input: s1 = "aab", s2 = "aba"
Output: true
Explanation: After 1 left rotation, s1 will become equal to s2.
Input: s1 = "abcd", s2 = "acbd"
Output: false
Explanation: Strings are not rotations of each other.
Constraints:
1 <= s1.size(), s2.size() <= 105

-------------------------------------------------------------------------------------------------------------------------------------------

//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {

    public static void main(String[] args) throws IOException {

        // taking input using BufferedReader class
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // taking total count of testcases
        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            // Reading the two Strings
            String s1 = br.readLine();
            String s2 = br.readLine();

            // Creating an object of class Rotate
            Solution obj = new Solution();

            // calling areRotations method
            // of class Rotate and printing
            //"1" if it returns true
            // else "0"
            if (obj.areRotations(s1, s2)) {
                System.out.println("true");
            } else {
                System.out.println("false");
            }
        }
    }
}
// } Driver Code Ends



class Solution {
    // Function to check if two strings are rotations of each other or not.
    public static boolean areRotations(String s1, String s2) {
        // Your code here
        //time limit exceeded
        /*if(s1.length() != s2.length())
            return false;
        for(int i=0; i<s1.length(); i++)
        {
            if(s2.equals(s1.substring(i+1) + s1.substring(0,i+1)))
                return true;
        }
        return false;*/
        
        
        //using string builder: time limit exceeded
        /*if(s1.length() != s2.length())
            return false;
        StringBuilder st1=new StringBuilder(s1);
        StringBuilder st2=new StringBuilder(s2);
        for(int i=0; i<s1.length(); i++)
        {
            StringBuilder s = new StringBuilder();
            s.append(st1.substring(i + 1)).append(st1.substring(0, i + 1)); 
            if(st2.toString().equals(s.toString()))
                return true;
        }
        return false;*/
        
        
        //using dequeue: even more slower
        /*if(s1.length() != s2.length())
            return false;
        Deque<Character> st1=new ArrayDeque<>();
        Deque<Character> st2=new ArrayDeque<>();
        for(int i=0; i<s1.length(); i++)
        {
            st1.addLast(s1.charAt(i));
            st2.addLast(s2.charAt(i));
        }
        for(int i=0; i<s1.length(); i++)
        {
            st1.addLast(st1.getFirst());
            st1.removeFirst();
            //System.out.println(st1);
            if( st1.toString().equals(st2.toString()) )
            {
                //System.out.println(st1);
                return true;
            }
        }
        return false;*/
        
        
        //Time Complexity : O(n)
        if(s1.length() != s2.length())
            return false;
        //return (s1+s1).contains(s2);
        return (s1+s1).lastIndexOf(s2)>=0;
    }
}
