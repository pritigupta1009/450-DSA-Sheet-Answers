Merge Without Extra Space
Difficulty: MediumAccuracy: 32.01%Submissions: 296K+Points: 4Average Time: 20m
Given two sorted arrays a[] and b[] of size n and m respectively, the task is to merge them in sorted order without using any extra space. Modify a[] so that it contains the first n elements and modify b[] so that it contains the last m elements.

Examples:

Input: a[] = [2, 4, 7, 10], b[] = [2, 3]
Output:
2 2 3 4
7 10
Explanation: After merging the two non-decreasing arrays, we get, 2 2 3 4 7 10
Input: a[] = [1, 5, 9, 10, 15, 20], b[] = [2, 3, 8, 13]
Output:
1 2 3 5 8 9
10 13 15 20
Explanation: After merging two sorted arrays we get 1 2 3 5 8 9 10 13 15 20.
Input: a[] = [0, 1], b[] = [2, 3]
Output:
0 1
2 3
Explanation: After merging two sorted arrays we get 0 1 2 3.
Constraints:
1 <= a.size(), b.size() <= 105
0 <= a[i], b[i] <= 107

--------------------------------------------------------------------------------------------------------------

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); // Inputting the testcases

        while (t-- > 0) {
            String arr1[] = br.readLine().trim().split(" ");
            String arr2[] = br.readLine().trim().split(" ");

            int a[] = new int[arr1.length];
            int b[] = new int[arr2.length];

            for (int i = 0; i < a.length; i++) a[i] = Integer.parseInt(arr1[i]);
            for (int i = 0; i < b.length; i++) b[i] = Integer.parseInt(arr2[i]);

            Solution ob = new Solution();
            ob.mergeArrays(a, b);

            StringBuffer str = new StringBuffer();
            for (int i = 0; i < a.length; i++) {
                str.append(a[i] + " ");
            }
            System.out.println(str);
            str = new StringBuffer();
            for (int i = 0; i < b.length; i++) {
                str.append(b[i] + " ");
            }
            System.out.println(str);
            System.out.println("~");
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    // Function to merge the arrays.
    public void mergeArrays(int a[], int b[]) {
        // code here
        
        int n=a.length;
        int m=b.length;
        // using arraylist
        /*ArrayList<Integer> list = new ArrayList<>();
        for(int i=0; i<n; i++)
        {
            list.add(a[i]);
        }
        for(int i=0; i<m; i++)
        {
            list.add(b[i]);
        }
        Collections.sort(list);
        for(int i=0; i<n; i++)
        {
            a[i]=list.remove(0);
        }
        for(int i=0; i<m; i++)
        {
            b[i]=list.remove(0);
        }*/
        
        
        //alternative way : GAP method
        int len = m+n;
        int gap = (len/2) + (len%2);
        while(gap>0)
        {
            int left = 0;
            int right = left+gap;
            while(right < len)
            {
                if(left<n && right>=n) //left in array a and right in array b
                {
                    swapIfGreater(a, b, left, right-n);
                }
                else if(left>=n) //left and right both in array b : (left>=n && right>=n)
                {
                    swapIfGreater(b, b, left-n, right-n);
                }
                else //left and right both in array a : (left<n && right<n)
                {
                    swapIfGreater(a, a, left, right);
                }
                left++;
                right++;
            }
            if(gap == 1)
                break;
            gap = (gap/2) + (gap%2);
        }
    }
    
    public void swapIfGreater(int a[], int b[], int ind1, int ind2)
    {
        if(a[ind1] > b[ind2])
        {
            //swap them
            int temp = a[ind1];
            a[ind1] = b[ind2];
            b[ind2] = temp;
        }
    }
}
