Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and using only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [3,3,3,3,3]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

-------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int findDuplicate(int[] nums) {
        
        /* Shortcut method */
        /*Arrays.sort(nums);
        for(int i=0; i<nums.length -1; i++)
        {
            if(nums[i]==nums[i+1])
                return nums[i];
        }

        return -1;*/



        // Time Limit Exceeded
        /*for(int i=0; i<nums.length -1; i++)
        {
            int x=nums[i];
            for(int j=i+1; j<nums.length; j++)
            {
                if(x==nums[j])
                    return x;
            }
        }

        return -1;*/



        //alterntive method : using hash table
        HashMap<Integer, Integer> map = new HashMap<> ();
        for(int i=0; i<nums.length; i++)
        {
            int frequency=1;
            int key = nums[i];
            if(map.containsKey(key))
            {
                frequency = map.get(key); // gets the value associated with the key
                map.put(key, frequency+1);
            }
            else
                map.put(key, 1);
        }
        //System.out.println(map);
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) 
        {
            if (entry.getValue() > 1) 
                return entry.getKey();
        }
        return -1;
    }
}
